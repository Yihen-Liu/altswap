/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace OrderBook {
  export type UserDataStruct = {
    amount: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type UserDataStructOutput = [BigNumber, string, BigNumber] & {
    amount: BigNumber;
    receiver: string;
    timestamp: BigNumber;
  };
}

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "getUserDataByIndex(address,uint256)": FunctionFragment;
    "getUserHistory(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "recipientAddress()": FunctionFragment;
    "requiredAmount()": FunctionFragment;
    "storeDataWithRecipient(address,int256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePrice(uint256)": FunctionFragment;
    "updateRecipient(address)": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "usdtToken()": FunctionFragment;
    "userHistory(address,uint256)": FunctionFragment;
    "withdrawTokens(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getUserDataByIndex"
      | "getUserHistory"
      | "owner"
      | "price"
      | "recipientAddress"
      | "requiredAmount"
      | "storeDataWithRecipient"
      | "transferOwnership"
      | "updatePrice"
      | "updateRecipient"
      | "usdcToken"
      | "usdtToken"
      | "userHistory"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUserDataByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeDataWithRecipient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUserDataByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDataWithRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "DataStored(address,int256,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataStored"): EventFragment;
}

export interface DataStoredEventObject {
  user: string;
  amount: BigNumber;
  receiver: string;
  tokenType: string;
  timestamp: BigNumber;
}
export type DataStoredEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  DataStoredEventObject
>;

export type DataStoredEventFilter = TypedEventFilter<DataStoredEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getUserDataByIndex(
      _user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber]>;

    getUserHistory(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[OrderBook.UserDataStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    recipientAddress(overrides?: CallOverrides): Promise<[string]>;

    requiredAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    storeDataWithRecipient(
      sBTCReceiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRecipient(
      _newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    usdtToken(overrides?: CallOverrides): Promise<[string]>;

    userHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        amount: BigNumber;
        receiver: string;
        timestamp: BigNumber;
      }
    >;

    withdrawTokens(
      amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getUserDataByIndex(
    _user: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, BigNumber]>;

  getUserHistory(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<OrderBook.UserDataStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  recipientAddress(overrides?: CallOverrides): Promise<string>;

  requiredAmount(overrides?: CallOverrides): Promise<BigNumber>;

  storeDataWithRecipient(
    sBTCReceiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    tokenType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRecipient(
    _newRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  usdtToken(overrides?: CallOverrides): Promise<string>;

  userHistory(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      amount: BigNumber;
      receiver: string;
      timestamp: BigNumber;
    }
  >;

  withdrawTokens(
    amount: PromiseOrValue<BigNumberish>,
    tokenType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getUserDataByIndex(
      _user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber]>;

    getUserHistory(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<OrderBook.UserDataStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    recipientAddress(overrides?: CallOverrides): Promise<string>;

    requiredAmount(overrides?: CallOverrides): Promise<BigNumber>;

    storeDataWithRecipient(
      sBTCReceiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRecipient(
      _newRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    usdtToken(overrides?: CallOverrides): Promise<string>;

    userHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        amount: BigNumber;
        receiver: string;
        timestamp: BigNumber;
      }
    >;

    withdrawTokens(
      amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DataStored(address,int256,address,string,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      receiver?: null,
      tokenType?: null,
      timestamp?: null
    ): DataStoredEventFilter;
    DataStored(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      receiver?: null,
      tokenType?: null,
      timestamp?: null
    ): DataStoredEventFilter;
  };

  estimateGas: {
    getUserDataByIndex(
      _user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHistory(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    recipientAddress(overrides?: CallOverrides): Promise<BigNumber>;

    requiredAmount(overrides?: CallOverrides): Promise<BigNumber>;

    storeDataWithRecipient(
      sBTCReceiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRecipient(
      _newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    usdtToken(overrides?: CallOverrides): Promise<BigNumber>;

    userHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTokens(
      amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getUserDataByIndex(
      _user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHistory(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storeDataWithRecipient(
      sBTCReceiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRecipient(
      _newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      amount: PromiseOrValue<BigNumberish>,
      tokenType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
