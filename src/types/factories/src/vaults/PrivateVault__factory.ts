/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  PrivateVault,
  PrivateVaultInterface,
} from "../../../src/vaults/PrivateVault";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "caller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "index",
        type: "uint64",
      },
    ],
    name: "getPrivateDataByIndex",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "name",
        type: "address",
      },
    ],
    name: "getPrivateDataByName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "labelHash",
        type: "address",
      },
    ],
    name: "labelIsExist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "index",
        type: "uint64",
      },
    ],
    name: "labelName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "cryptoLabel",
        type: "string",
      },
      {
        internalType: "address",
        name: "labelHash",
        type: "address",
      },
    ],
    name: "saveWithMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "cryptoLabel",
        type: "string",
      },
      {
        internalType: "address",
        name: "labelHash",
        type: "address",
      },
    ],
    name: "saveWithoutMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "total",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d97380380610d9783398101604081905261002f9161017b565b604080518082018252601981527f707269766174655661756c7440736565646c6973742e6f7267000000000000006020918201528151808301835260058152640312e302e360dc1b9082015281517fdad980a10e49615eb7fc5d7774307c8f04d959ac46349850121d52b1e409fc1e818301527f524897c45a2b08b64fa5a5db0ba55d51bd9bba5ea1fb261f9101b9f6b46f193f818401527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600755600080546001600160a01b0319166001600160a01b0393841617905560018054600680546001600160401b0319169055919092166001600160a81b03199091161790556101ae565b80516001600160a01b038116811461017657600080fd5b919050565b6000806040838503121561018e57600080fd5b6101978361015f565b91506101a56020840161015f565b90509250929050565b610bda806101bd6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806373b26be311610076578063b5802dad1161005b578063b5802dad1461018b578063c4dfc5ad1461019e578063fc9c8d39146101b157600080fd5b806373b26be314610158578063ad3d5e381461017857600080fd5b80632ddbd13a116100a75780632ddbd13a146100eb5780633644e5151461011d5780634f02c4201461013457600080fd5b80631c8ff520146100c357806327513b70146100d8575b600080fd5b6100d66100d136600461091d565b6101dc565b005b6100d66100e636600461091d565b6103ee565b6006546100ff9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b61012660075481565b604051908152602001610114565b60015461014890600160a01b900460ff1681565b6040519015158152602001610114565b61016b61016636600461099e565b610572565b60405161011491906109c0565b61016b610186366004610a0e565b6106d2565b61014861019936600461099e565b610772565b61016b6101ac366004610a0e565b6107db565b6001546101c4906001600160a01b031681565b6040516001600160a01b039091168152602001610114565b6001546001600160a01b031633146102285760405162461bcd60e51b815260206004820152600a6024820152690ecc2ead8e874c2eae8d60b31b60448201526064015b60405180910390fd5b600154600160a01b900460ff16156102825760405162461bcd60e51b815260206004820152600c60248201527f7661756c743a6d696e7465640000000000000000000000000000000000000000604482015260640161021f565b6001600160a01b03811660009081526002602052604090205460ff16156102d95760405162461bcd60e51b815260206004820152600b60248201526a1d985d5b1d0e995e1a5cdd60aa1b604482015260640161021f565b6001600160a01b03811660009081526005602052604090206102fc858783610ad7565b5060065467ffffffffffffffff166000908152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616908117909155835260049091529020610358838583610ad7565b506006805467ffffffffffffffff1690600061037383610b98565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506001600160a01b03166000908152600260205260409020805460ff1916600190811790915580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b17905550505050565b6001546001600160a01b031633146104355760405162461bcd60e51b815260206004820152600a6024820152690ecc2ead8e874c2eae8d60b31b604482015260640161021f565b6001600160a01b03811660009081526002602052604090205460ff161561048c5760405162461bcd60e51b815260206004820152600b60248201526a1d985d5b1d0e995e1a5cdd60aa1b604482015260640161021f565b6001600160a01b03811660009081526005602052604090206104af858783610ad7565b5060065467ffffffffffffffff166000908152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915583526004909152902061050b838583610ad7565b506006805467ffffffffffffffff1690600061052683610b98565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506001600160a01b03166000908152600260205260409020805460ff1916600117905550505050565b6001546060906001600160a01b031633146105bc5760405162461bcd60e51b815260206004820152600a6024820152690ecc2ead8e874c2eae8d60b31b604482015260640161021f565b6001600160a01b03821660009081526002602052604090205460ff1615156001146106295760405162461bcd60e51b815260206004820152600e60248201527f7661756c743a6e6f206578697374000000000000000000000000000000000000604482015260640161021f565b6001600160a01b0382166000908152600560205260409020805461064c90610a4e565b80601f016020809104026020016040519081016040528092919081815260200182805461067890610a4e565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505090505b919050565b6001546060906001600160a01b0316331461071c5760405162461bcd60e51b815260206004820152600a6024820152690ecc2ead8e874c2eae8d60b31b604482015260640161021f565b60065467ffffffffffffffff9081169083161061073857600080fd5b67ffffffffffffffff82166000908152600360209081526040808320546001600160a01b0316835260049091529020805461064c90610a4e565b6001546000906001600160a01b031633146107bc5760405162461bcd60e51b815260206004820152600a6024820152690ecc2ead8e874c2eae8d60b31b604482015260640161021f565b506001600160a01b031660009081526002602052604090205460ff1690565b6001546060906001600160a01b031633146108255760405162461bcd60e51b815260206004820152600a6024820152690ecc2ead8e874c2eae8d60b31b604482015260640161021f565b60065467ffffffffffffffff8084169116116108835760405162461bcd60e51b815260206004820152600e60248201527f7661756c743a6f766572666c6f77000000000000000000000000000000000000604482015260640161021f565b67ffffffffffffffff82166000908152600360209081526040808320546001600160a01b0316835260059091529020805461064c90610a4e565b60008083601f8401126108cf57600080fd5b50813567ffffffffffffffff8111156108e757600080fd5b6020830191508360208285010111156108ff57600080fd5b9250929050565b80356001600160a01b03811681146106cd57600080fd5b60008060008060006060868803121561093557600080fd5b853567ffffffffffffffff8082111561094d57600080fd5b61095989838a016108bd565b9097509550602088013591508082111561097257600080fd5b5061097f888289016108bd565b9094509250610992905060408701610906565b90509295509295909350565b6000602082840312156109b057600080fd5b6109b982610906565b9392505050565b600060208083528351808285015260005b818110156109ed578581018301518582016040015282016109d1565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610a2057600080fd5b813567ffffffffffffffff811681146109b957600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610a6257607f821691505b602082108103610a8257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ad257600081815260208120601f850160051c81016020861015610aaf5750805b601f850160051c820191505b81811015610ace57828155600101610abb565b5050505b505050565b67ffffffffffffffff831115610aef57610aef610a38565b610b0383610afd8354610a4e565b83610a88565b6000601f841160018114610b375760008515610b1f5750838201355b600019600387901b1c1916600186901b178355610b91565b600083815260209020601f19861690835b82811015610b685786850135825560209485019460019092019101610b48565b5086821015610b855760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600067ffffffffffffffff808316818103610bc357634e487b7160e01b600052601160045260246000fd5b600101939250505056fea164736f6c6343000811000a";

type PrivateVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivateVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivateVault__factory extends ContractFactory {
  constructor(...args: PrivateVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _signer: PromiseOrValue<string>,
    _caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PrivateVault> {
    return super.deploy(
      _signer,
      _caller,
      overrides || {}
    ) as Promise<PrivateVault>;
  }
  override getDeployTransaction(
    _signer: PromiseOrValue<string>,
    _caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_signer, _caller, overrides || {});
  }
  override attach(address: string): PrivateVault {
    return super.attach(address) as PrivateVault;
  }
  override connect(signer: Signer): PrivateVault__factory {
    return super.connect(signer) as PrivateVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivateVaultInterface {
    return new utils.Interface(_abi) as PrivateVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivateVault {
    return new Contract(address, _abi, signerOrProvider) as PrivateVault;
  }
}
