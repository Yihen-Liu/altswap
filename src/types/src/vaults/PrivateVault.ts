/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface PrivateVaultInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "caller()": FunctionFragment;
    "getPrivateDataByIndex(uint64)": FunctionFragment;
    "getPrivateDataByName(address)": FunctionFragment;
    "labelIsExist(address)": FunctionFragment;
    "labelName(uint64)": FunctionFragment;
    "minted()": FunctionFragment;
    "saveWithMinting(string,string,address)": FunctionFragment;
    "saveWithoutMinting(string,string,address)": FunctionFragment;
    "total()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "caller"
      | "getPrivateDataByIndex"
      | "getPrivateDataByName"
      | "labelIsExist"
      | "labelName"
      | "minted"
      | "saveWithMinting"
      | "saveWithoutMinting"
      | "total"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "caller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrivateDataByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrivateDataByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "labelIsExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "labelName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "minted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saveWithMinting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "saveWithoutMinting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "caller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateDataByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateDataByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "labelIsExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "labelName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveWithMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveWithoutMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;

  events: {};
}

export interface PrivateVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrivateVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    caller(overrides?: CallOverrides): Promise<[string]>;

    getPrivateDataByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrivateDataByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    labelIsExist(
      labelHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    labelName(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minted(overrides?: CallOverrides): Promise<[boolean]>;

    saveWithMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveWithoutMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    total(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  caller(overrides?: CallOverrides): Promise<string>;

  getPrivateDataByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrivateDataByName(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  labelIsExist(
    labelHash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  labelName(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  minted(overrides?: CallOverrides): Promise<boolean>;

  saveWithMinting(
    data: PromiseOrValue<string>,
    cryptoLabel: PromiseOrValue<string>,
    labelHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveWithoutMinting(
    data: PromiseOrValue<string>,
    cryptoLabel: PromiseOrValue<string>,
    labelHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    caller(overrides?: CallOverrides): Promise<string>;

    getPrivateDataByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrivateDataByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    labelIsExist(
      labelHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    labelName(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    minted(overrides?: CallOverrides): Promise<boolean>;

    saveWithMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    saveWithoutMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    total(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    caller(overrides?: CallOverrides): Promise<BigNumber>;

    getPrivateDataByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrivateDataByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    labelIsExist(
      labelHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    labelName(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minted(overrides?: CallOverrides): Promise<BigNumber>;

    saveWithMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveWithoutMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    caller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrivateDataByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrivateDataByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    labelIsExist(
      labelHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    labelName(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saveWithMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveWithoutMinting(
      data: PromiseOrValue<string>,
      cryptoLabel: PromiseOrValue<string>,
      labelHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
